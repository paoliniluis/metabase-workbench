version: '3.9'
services:
  nginx-logging:
    image: nginx:1.21.6-alpine
    hostname: nginx-logging
    container_name: nginx-logging
    volumes: 
      - $PWD/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - $PWD/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - $PWD/nginx/certs/:/etc/nginx/conf.d/certs/
    networks:
      - metanet1-logging
    ports:
      - 8081:443
    cpus: 1
    mem_limit: 128m
    depends_on:
      metabase-logging:
        condition: service_healthy
  metabase-logging:
    image: metabase/metabase-enterprise:v1.43.2
    container_name: metabase-logging
    hostname: metabase-logging
    volumes: 
    - /dev/urandom:/dev/random:ro
    - $PWD/logging_config:/metabase.db
    ports:
      - 3001:3000
    environment: 
      - "MB_DB_TYPE=postgres"
      - "MB_DB_DBNAME=metabase"
      - "MB_DB_PORT=5432"
      - "MB_DB_USER=metabase"
      - "MB_DB_PASS=mysecretpassword"
      - "MB_DB_HOST=postgres-logging"
      - "MB_JDBC_DATA_WAREHOUSE_MAX_CONNECTION_POOL_SIZE=2"
      - "JAVA_OPTS=-XX:MaxRAMPercentage=100 -Dlog4j.configurationFile=file:///metabase.db/log4j2.xml -Dcom.sun.management.jmxremote.port=1099 -Dcom.sun.management.jmxremote.rmi.port=1099 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Djava.rmi.server.hostname=metabase"
      # - "MB_JDBC_DATA_WAREHOUSE_MAX_CONNECTION_POOL_SIZE=15"
      - "MB_SEND_EMAIL_ON_FIRST_LOGIN_FROM_NEW_DEVICE=false"
      - "MB_SEND_NEW_SSO_USER_ADMIN_EMAIL=false"
    networks: 
      - metanet1-logging
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 30
    depends_on: 
      postgres-logging:
        condition: service_healthy
      timescaledb-logging:
        condition: service_healthy
    cpus: 1
    mem_limit: 1024m
  setup-logging:
    image: bash:5.1.16
    container_name: setup-logging
    volumes:
      - $PWD/setup:/tmp
    networks:
      - metanet1-logging
    command: sh /tmp/metabase-setup.sh metabase-logging:3000
    cpus: 1
    mem_limit: 64m
    depends_on:
      metabase-logging:
        condition: service_healthy
  postgres-logging:
    image: postgres:14.2-alpine
    container_name: postgres-logging
    hostname: postgres-logging
    ports: 
      - 5432:5432
    environment:
      - "POSTGRES_USER=metabase"
      - "POSTGRES_DB=metabase"
      - "POSTGRES_PASSWORD=mysecretpassword"
    # volumes:
    #   - $PWD/postgres_origin:/var/lib/postgresql/data
    networks: 
      - metanet1-logging
    cpus: 1
    mem_limit: 64m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U metabase"]
      interval: 10s
      timeout: 5s
      retries: 5
  timescaledb-logging:
    build: timescaledb/.
    container_name: telemetry-logging
    hostname: telemetry-logging
    environment:
      - "POSTGRES_USER=metabase"
      - "POSTGRES_DB=metabase_telemetry"
      - "POSTGRES_PASSWORD=mysecretpassword"
    networks:
      - metanet1-logging
    cpus: 1
    mem_limit: 1024m
    command: -c ssl=on -c hba_file=/var/lib/postgresql/pg_hba.conf -c ssl_cert_file=/var/lib/postgresql/pgconf/server.crt -c ssl_key_file=/var/lib/postgresql/pgconf/server.key -c ssl_ca_file=/var/lib/postgresql/pgconf/ca.crt
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U metabase -d metabase_telemetry"]
      interval: 10s
      timeout: 5s
      retries: 30
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - metanet1-logging
    restart: always
    privileged: true
    deploy:
      mode: global
    ports:
      - 8080:8080
    cpus: 1
    mem_limit: 256m
    command: |
     -storage_driver=statsd
     -storage_driver_host=api_node:3000 
     -docker_only=true 
     -event_storage_age_limit=default=8h
    depends_on:
      timescaledb-logging:
        condition: service_healthy
  api_python:
    container_name: api_python
    hostname: api_python
    restart: always
    build: api_python/.
    networks: 
      - metanet1-logging
    cpus: 1
    mem_limit: 256mb
    environment:
      - "POSTGRES_HOST=telemetry-logging"
      - "POSTGRES_USER=metabase"
      - "POSTGRES_DB=metabase_telemetry"
      - "POSTGRES_PASSWORD=mysecretpassword"
      - "WEB_CONCURRENCY=1"
    depends_on:
      timescaledb-logging:
        condition: service_healthy
  api_node:
    container_name: api_node
    restart: always
    hostname: api_node
    build: api_node/.
    networks: 
      - metanet1-logging
    environment:
      - "POSTGRES_HOST=telemetry-logging"
      - "POSTGRES_USER=metabase"
      - "POSTGRES_DB=metabase_telemetry"
      - "POSTGRES_PASSWORD=mysecretpassword"
    cpus: 1
    mem_limit: 128m
    depends_on:
      timescaledb-logging:
        condition: service_healthy
  postgres-data1:
    image: metabase/qa-databases:postgres-sample-12
    container_name: postgres-data1-logging
    hostname: postgres-data1-logging
    ports:
      - 5433:5432
    networks: 
      - metanet1-logging
  mariadb-data-logging:
    build: mariadb-data/.
    container_name: mariadb-data-logging
    hostname: mariadb-data-logging
    ports:
      - 3306:3306
    networks: 
      - metanet1-logging
  openssh-server:
    image: lscr.io/linuxserver/openssh-server:version-8.8_p1-r1
    container_name: ssh-logging
    hostname: ssh-logging
    environment:
      - PASSWORD_ACCESS=true
      - USER_PASSWORD=mysecretpassword
      - USER_NAME=metabase
    volumes:
      - $PWD/ssh/sshd_config:/config/ssh_host_keys/sshd_config
    networks: 
      - metanet1-logging
    cpus: 1
    mem_limit: 128m
  grafana:
    image: grafana/grafana-oss:main
    container_name: grafana
    hostname: grafana
    ports:
      - 3000:3000
    networks: 
      - metanet1-logging
    cpus: 1
    mem_limit: 128m
    volumes:
      - $PWD/grafana/:/etc/grafana/provisioning/datasources/
    depends_on:
      timescaledb-logging:
        condition: service_healthy
  conn_info:
    build: connection_checker/.
    restart: always
    container_name: conn_info
    hostname: conn_info
    networks: 
      - metanet1-logging
    cpus: 1
    mem_limit: 128m
    environment:
      - SOURCE=mariadb-data-logging
      - SOURCE_TYPE=mariadb
      - USER_SOURCE=root
      - PASS_SOURCE=metasample123
      - DB_SOURCE=sample
      - DEST=telemetry-logging
      - USER_DEST=metabase
      - PASS_DEST=mysecretpassword
      - DB_DEST=metabase_telemetry
    depends_on:
      timescaledb-logging:
        condition: service_healthy
networks: 
  metanet1-logging:
    driver: bridge